apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */

react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")
    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]
    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []
    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

apply from: "../../node_modules/@sentry/react-native/sentry.gradle"

// prevent sentry upload of sourcemaps in debug build
// https://github.com/getsentry/react-native-sentry/issues/539#issuecomment-461972163
if (!getGradle().getStartParameter().getTaskRequests().toString().contains("Debug")) {
    // apply from: "../../node_modules/react-native-sentry/sentry.gradle"
}

// generate apk version numbers from package.json
// see https://medium.com/@andr3wjack/versioning-react-native-apps-407469707661
import groovy.json.JsonSlurper

// read "version" in package.json
def getNpmVersion() {
    def inputFile = new File("../package.json")
    def packageJson = new JsonSlurper().parseText(inputFile.text)
    return packageJson["version"]
}

def getNpmBuildNumber() {
    def inputFile = new File("../package.json")
    def packageJson = new JsonSlurper().parseText(inputFile.text)
    return packageJson["build"]
}

// build an integer number to keep google happy
def setGoogleVersion() {
    def (major, minor, patch) = getNpmVersion().tokenize('.')
    def build = getNpmBuildNumber()
    return Integer.parseInt(major) * 1000000 + Integer.parseInt(minor) * 10000 + Integer.parseInt(patch) * 100 + Integer.parseInt(build)
}

// build a version name to show to the user
// in the format "1.3.37 (4)"
def setVersionName() {
    def version = getNpmVersion()
    def build = getNpmBuildNumber()
    return version + " (" + build + ")"
}

def userVersion = setVersionName()
def googleVersion = setGoogleVersion()

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion
    namespace "org.missingmaps.mapswipe"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "org.missingmaps.mapswipe"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode googleVersion
        versionName userVersion
    }

    // see https://reactnative.dev/docs/signed-apk-android.
    signingConfigs {
        release {
            if (project.hasProperty('MAPSWIPE_RELEASE_STORE_FILE')) {
                storeFile file(MAPSWIPE_RELEASE_STORE_FILE)
                storePassword MAPSWIPE_RELEASE_STORE_PASSWORD
                keyAlias MAPSWIPE_RELEASE_KEY_ALIAS
                keyPassword MAPSWIPE_RELEASE_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    flavorDimensions "version"
    productFlavors {
        // flavors build a slightly different version of the app.
        // Both can be built as debug or release variant.
        // Both flavors can coexist on a phone
        dev {
            // dev: points at dev-mapswipe firebase
            // only used by a handful of people for developing and testing
            dimension "version"
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev'
        }
        production {
            // production: points at msf-mapswipe firebase
            // the one distributed to all users
            // applicationId '' // skipped to keep the current appId and allow easy upgrades for users
            dimension "version"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    implementation 'androidx.appcompat:appcompat:1.1.0-rc01'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02'
    implementation "androidx.multidex:multidex:2.0.1"
    androidTestImplementation('com.wix:detox:+') { transitive = true }
    androidTestImplementation 'junit:junit:4.12'

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

task copyGoogleFirebaseSettingsForDetox(type: Copy) {
    // detox doesn't seem to find google-services.json because it does not seem aware
    // of the build flavor. So we copy the file to app/src where it will be found
    // and modify its content because we're running on the "default" flavour
    // TODO: there is probably a better way to do this, but in the meantime...
    description = 'Copying google-services.json from dev flavor'
    from file('src/dev/google-services.json')
    into file('.')
}

task modifyPackageNameForDetox(type: Exec) {
    workingDir '.'
    commandLine 'bash', '-c', 'sed -i "s:org.missingmaps.mapswipe.dev:org.missingmaps.mapswipe:" google-services.json'
}

afterEvaluate {
    // processDevDebugGoogleServices.dependsOn copyGoogleFirebaseSettingsForDetox
    // FIXME: the below code is causing build failure, I have commented it out for now
    // processDevDebugGoogleServices.dependsOn modifyPackageNameForDetox 
    // processReleaseGoogleServices.dependsOn switchToRelease
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply plugin: 'com.google.gms.google-services'