name: iOS build and release

  # CI for iOS
  # This will build and push the app to testflight
  # or appstore on tagged commits
  # See other files in this folder for more explanations.

on: [push]
jobs:
  release-ios:
    name: Build and release iOS app
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1

      - name: List available versions of Xcode
        run: ls -n /Applications/ | grep Xcode*

      - uses: actions/setup-node@v1
        with:
          node-version: '18'

      - name: Install javascript packages
        uses: bahmutov/npm-install@v1

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7.6'

      - name: Install Fastlane
        run: bundle install

      - name: Install cocoapods
        run: gem install xcpretty cocoapods

      # - name: TEMP manually run pod install
      #   env:
      #     # pod install seems to rely on Xcode for something, make sure we use the same version throughout the process
      #     DEVELOPER_DIR: /Applications/Xcode_13.0.app/Contents/Developer
      #   run: cd ios && bundle exec pod install

      # - name: TEMP get updated podfile.lock
      #   run: cat ios/Podfile.lock

      - name: Get the tag value from github
        # see https://stackoverflow.com/a/58178121/1138710
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Save git version so the app can show it to users
        env:
          GIT_TAG: ${{ steps.vars.outputs.tag }}

        # replace the / in branch name with _
        run: sed -i '' "s/COMMIT/$GITHUB_SHA/" debugInfo.json; sed -i '' "s/TAG/$(echo ${GIT_TAG} | tr / _)/" debugInfo.json

      - name: Hardcode OAuth prefix and urls for production version
        if: startsWith(github.ref, 'refs/tags/') && !endsWith(github.ref, '-beta')
        run: |
          sed -i '' "s/string>devmapswipe/string>mapswipe/" ios/mapswipe/Info.plist
          sed -i '' "s/dev-auth.mapswipe.org/auth.mapswipe.org/" debugInfo.json
          sed -i '' "s/devmapswipe/mapswipe/" debugInfo.json
          sed -i '' "s/dev-api/api/" src/shared/constants.js
          sed -i '' "s/dev-community/community/" src/shared/constants.js

      - name: Decode sentry.properties (and prod version)
        env:
          SENTRY_PROPERTIES: ${{ secrets.FILE_SENTRY_PROPERTIES }}
        run: |
          echo "$SENTRY_PROPERTIES" | base64 -d > ./ios/cfg/sentry.properties
          cp ./ios/cfg/sentry.properties ./ios/cfg/sentry.prod.properties

      - name: Decode development GoogleService-Info.plist
        env:
          FILE_IOS_GOOGLE_SERVICES_DEV: ${{ secrets.FILE_IOS_GOOGLE_SERVICES_DEV }}
        run: echo "$FILE_IOS_GOOGLE_SERVICES_DEV" | base64 -d > ./ios/cfg/GoogleService-Info.dev.plist

      - name: Decode production GoogleService-Info.plist
        env:
          FILE_IOS_GOOGLE_SERVICES_PRD: ${{ secrets.FILE_IOS_GOOGLE_SERVICES_PRD }}
        run: echo "$FILE_IOS_GOOGLE_SERVICES_PRD" | base64 -d > ./ios/cfg/GoogleService-Info.prd.plist

      - name: Decode the RSA key for use with ssh
        env:
          FILE_DECRYPTION_PASSPHRASE: ${{ secrets.FILE_DECRYPTION_PASSPHRASE }}
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$FILE_DECRYPTION_PASSPHRASE" --output ./ios/cfg/mapswipe.dev_at_gmail_rsa_key_for_travis_ci ./ios/cfg/mapswipe.dev_at_gmail_rsa_key_for_travis_ci.gpg
          chmod 600 ./ios/cfg/mapswipe.dev_at_gmail_rsa_key_for_travis_ci

      - name: Decode the apple connect apicert
        env:
          FILE_DECRYPTION_PASSPHRASE: ${{ secrets.FILE_DECRYPTION_PASSPHRASE }}
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$FILE_DECRYPTION_PASSPHRASE" --output ./ios/AuthKey_4B2GC5YX57.p8 ./ios/cfg/MapSwipe_apple_release_key_AuthKey_4B2GC5YX57.p8.gpg

      - name: Add gitlab to ssh_known_hosts
        env:
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        run: echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

      - name: Build the app and run unit tests
        # The test lane refreshes the development certificates, compiles the app and launches the unit tests.
        # Actual Tests have been disabled since we had issues launching the simulator, but the app is being compiled.
        # only build locally if not on a tagged commit, as the next fastlane runs will run the build anyway
        if: startsWith(github.ref, 'refs/heads/')
        env:
          # select the version of Xcode we want
          DEVELOPER_DIR: /Applications/Xcode_14.2.app/Contents/Developer
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: cd ios && bundle exec fastlane test

      - name: Release to testflight
        # only deploy a release on a non-beta tag
        # FIXME: there does not seem to be a way with github actions (as of may 2021) to get
        # both tag and branch, so for now we will rely on the user not tagging randomly
        if: startsWith(github.ref, 'refs/tags/') && endsWith(github.ref, '-beta')
        env:
          DEVELOPER_DIR: /Applications/Xcode_14.2.app/Contents/Developer
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: cd ios && bundle exec fastlane beta

      - name: Release to AppStore
        # only deploy a release on a beta tag
        if: startsWith(github.ref, 'refs/tags/') && !endsWith(github.ref, '-beta')
        env:
          DEVELOPER_DIR: /Applications/Xcode_14.2.app/Contents/Developer
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: cd ios && bundle exec fastlane release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build.log
          path: ~/Library/Logs/gym/*.log

      - name: Upload release assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ endsWith(github.ref, '-beta') }}
          files: |
            ios/mapswipe.app.dSYM.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
