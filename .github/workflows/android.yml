name: Android build and release

  # CI for Android
  # This will build and push the resulting apk to github releases
  # and playstore when relevant
  # See other files in this folder for more explanations.

on: [push]
jobs:
  release-android:
    name: Build and release Android app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - uses: actions/setup-node@v1
        with:
          node-version: '16.1.0'

      - name: Install javascript packages
        uses: bahmutov/npm-install@v1

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7.3'

      - name: Install Fastlane
        run: bundle install

      - name: Decode sentry.properties
        env:
          SENTRY_PROPERTIES: ${{ secrets.FILE_SENTRY_PROPERTIES }}
        run: echo "$SENTRY_PROPERTIES" | base64 -d > ./android/sentry.properties

      - name: Decode development google-services.json
        env:
          FILE_ANDROID_GOOGLE_SERVICES_DEV: ${{ secrets.FILE_ANDROID_GOOGLE_SERVICES_DEV }}
        run: echo "$FILE_ANDROID_GOOGLE_SERVICES_DEV" | base64 -d > ./android/app/src/dev/google-services.json

      - name: Decode production google-services.json
        env:
          FILE_ANDROID_GOOGLE_SERVICES_PRODUCTION: ${{ secrets.FILE_ANDROID_GOOGLE_SERVICES_PRODUCTION }}
        run: mkdir -p ./android/app/src/production ; echo "$FILE_ANDROID_GOOGLE_SERVICES_PRODUCTION" | base64 -d > ./android/app/src/production/google-services.json

      - name: Decode the dev release keystore file
        # passwords and secrets used for decrypting this keystore file (in the build step further down)
        # MAPSWIPE_RELEASE_STORE_FILE=mapswipe-dev-release-key.keystore
        # MAPSWIPE_RELEASE_KEY_ALIAS=mapswipe-dev-key-alias
        # MAPSWIPE_RELEASE_STORE_PASSWORD=xxx
        # MAPSWIPE_RELEASE_KEY_PASSWORD=xxx
        # All vars are taken from actions env vars, prefixed with ORG_GRADLE_PROJECT_
        # See https://docs.gradle.org/5.6.4/userguide/build_environment.html#sec:project_properties
        # The keystore file is a binary file, somehow the base64 decoding used for other files does
        # not work well here, so we use gpg symetric encryption instead as recommended by github:
        # https://docs.github.com/en/actions/reference/encrypted-secrets#limits-for-secrets
        env:
          FILE_DECRYPTION_PASSPHRASE: ${{ secrets.FILE_DECRYPTION_PASSPHRASE }}
        run: gpg --quiet --batch --yes --decrypt --passphrase="$FILE_DECRYPTION_PASSPHRASE" --output ./android/app/mapswipe-dev-release-key.keystore ./android/app/mapswipe-dev-release-key.keystore.gpg

      - name: Decode the production release keystore file
        # this is the file used by yarn buildProd
        env:
          FILE_DECRYPTION_PASSPHRASE: ${{ secrets.FILE_DECRYPTION_PASSPHRASE }}
        run: gpg --quiet --batch --yes --decrypt --passphrase="$FILE_DECRYPTION_PASSPHRASE" --output ./android/app/mapswipe-production-release-key.keystore ./android/app/mapswipe-production-release-key.keystore.gpg

      - name: Get the tag value from github
        # see https://stackoverflow.com/a/58178121/1138710
        # the output of this step is used in the next one
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Save git version so the app can show it to users
        # the values default to dev env, so we only change them for production
        env:
          # we need this hack because github default env vars don't include the tag itself
          GIT_TAG: ${{ steps.vars.outputs.tag }}

        # replace the / in branch name with _
        run: |
          sed -ri "s/COMMIT/$GITHUB_SHA/" debugInfo.json
          sed -ri "s/TAG/$(echo ${GIT_TAG} | tr / _)/" debugInfo.json

      - name: Hardcode OAuth prefix and urls for production version
        if: startsWith(github.ref, 'refs/tags/') && !endsWith(github.ref, '-beta')
        run: |
          sed -ri "s/data android:scheme=\"devmapswipe\"/data android:scheme=\"mapswipe\"/" android/app/src/main/AndroidManifest.xml
          sed -ri "s/dev-auth.mapswipe.org/auth.mapswipe.org/" debugInfo.json
          sed -ri "s/devmapswipe/mapswipe/" debugInfo.json

      - name: Jetify react files
        run: yarn jetifier

      - name: Increase filesystem inotify watch limit
        run: sudo sysctl fs.inotify.max_user_watches=524288

      - name: Build dev APK
        # this build uses mapswipe-dev-release-key.keystore
        env:
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_KEY_ALIAS: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_DEV_RELEASE_KEY_ALIAS }}
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_KEY_PASSWORD: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_DEV_RELEASE_KEY_PASSWORD }}
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_STORE_FILE: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_DEV_RELEASE_STORE_FILE }}
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_STORE_PASSWORD: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_DEV_RELEASE_STORE_PASSWORD }}
        run: yarn buildDev

      - name: Build production APK and AAB
        # only build the release APK on "production" tags
        # This build uses mapswipe-production-release-key.keystore
        # The apk produced by this step is used by subsequent steps to:
        # - upload to github
        # - upload to playstore
        if: startsWith(github.ref, 'refs/tags/') && !endsWith(github.ref, '-beta')
        env:
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_KEY_ALIAS: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_PROD_RELEASE_KEY_ALIAS }}
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_KEY_PASSWORD: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_PROD_RELEASE_KEY_PASSWORD }}
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_STORE_FILE: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_PROD_RELEASE_STORE_FILE }}
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_STORE_PASSWORD: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_PROD_RELEASE_STORE_PASSWORD }}
        run: |
          # build the APK (which we'll upload to github releases)
          yarn buildProd
          # build the AAB (Android App Bundle)
          # Uploading an AAB requires opting-in to google managed signing keys, which in turn makes it much harder
          # to upload the same app to a different store. As we do not have to as of November 2021, we keep
          # using the APK upload, which means the github releases version and the playstore one are the same APK
          # yarn bundleProd

      - name: Upload APK to Github releases (beta build)
        uses: ncipollo/release-action@v1.8.10
        if: startsWith(github.ref, 'refs/tags/') && endsWith(github.ref, '-beta')
        with:
          artifacts: "./android/app/build/outputs/apk/dev/release/app-dev-release.apk"
          # mark it as prerelease as it's a beta/dev build
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APK to Github releases (production build)
        uses: ncipollo/release-action@v1.8.10
        if: startsWith(github.ref, 'refs/tags/') && !endsWith(github.ref, '-beta')
        with:
          artifacts: "./android/app/build/outputs/apk/production/release/app-production-release.apk"
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Decode the google api key file
        env:
          FILE_DECRYPTION_PASSPHRASE: ${{ secrets.FILE_DECRYPTION_PASSPHRASE }}
        run: gpg --quiet --batch --yes --decrypt --passphrase="$FILE_DECRYPTION_PASSPHRASE" --output ./android/google_play_api_key.json ./android/google_play_api_key.json.gpg

      - name: Release to PlayStore
        # only deploy a release on a non-beta tag
        # FIXME: there does not seem to be a way with github actions (as of may 2021) to get
        # both tag and branch, so for now we will rely on the user not tagging randomly
        if: startsWith(github.ref, 'refs/tags/') && !endsWith(github.ref, '-beta')
        env:
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: cd android && bundle exec fastlane deploy
